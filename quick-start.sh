#!/bin/bash

# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë                    SISTEMA DE AUTOMA√á√ÉO E IA v6.0                      ‚ñë
# ‚ñë                        Script de Inicializa√ß√£o R√°pida                  ‚ñë
# ‚ñë                                                                         ‚ñë
# ‚ñë                       Criado por: Marcelo D'√°vila                       ‚ñë
# ‚ñë                    Email: suporte@marcelodavila.com.br                  ‚ñë
# ‚ñë                     ¬© 2025 - Todos os direitos reservados               ‚ñë
# ‚ñë                                                                         ‚ñë
# ‚ñë  AVISO LEGAL: Este software √© protegido por direitos autorais e leis    ‚ñë
# ‚ñë  de propriedade intelectual. O uso n√£o autorizado √© proibido por lei.   ‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë

set -e  # Parar em caso de erro

# Configura√ß√µes
SCRIPT_VERSION="6.0"
LOG_FILE="/var/log/automation-quick-start.log"
PROJECT_DIR="$(pwd)"
ENV_FILE=".env"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
RESET='\033[0m'

# √çcones
ROCKET="üöÄ"
CHECK="‚úÖ"
WARNING="‚ö†Ô∏è"
ERROR="‚ùå"
INFO="‚ÑπÔ∏è"
GEAR="‚öôÔ∏è"
CROWN="üëë"
DIAMOND="üíé"

# Fun√ß√£o de log
log() {
    local message="$1"
    local level="${2:-INFO}"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo -e "$message"
    echo "[$timestamp] [$level] $(echo -e "$message" | sed 's/\x1b\[[0-9;]*m//g')" >> "$LOG_FILE"
}

# Banner
show_banner() {
    clear
    echo -e "${PURPLE}${WHITE}"
    cat << 'EOF'
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    
     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù
    
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
EOF
    echo -e "${RESET}"
    echo
    echo -e "${CYAN}${WHITE}                    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${RESET}"
    echo -e "${CYAN}${WHITE}                    ‚ïë      INICIALIZA√á√ÉO R√ÅPIDA v6.0        ‚ïë${RESET}"
    echo -e "${CYAN}${WHITE}                    ‚ïë       300+ Ferramentas Inclu√≠das      ‚ïë${RESET}"
    echo -e "${CYAN}${WHITE}                    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${RESET}"
    echo
    echo -e "${YELLOW}${WHITE}                    ${CROWN} Criado por: Marcelo D'√°vila ${CROWN}${RESET}"
    echo -e "${WHITE}                    üìß suporte@marcelodavila.com.br${RESET}"
    echo -e "${WHITE}                    ¬© 2025 - Todos os direitos reservados${RESET}"
    echo
}

# Verificar se √© root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log "${RED}${ERROR} Este script deve ser executado como root (sudo)${RESET}" "ERROR"
        exit 1
    fi
}

# Verificar sistema operacional
check_os() {
    log "${BLUE}${INFO} Verificando sistema operacional...${RESET}"
    
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        OS_NAME="$NAME"
        OS_VERSION="$VERSION"
        log "${GREEN}${CHECK} Sistema: $OS_NAME $OS_VERSION${RESET}"
    else
        log "${RED}${ERROR} Sistema operacional n√£o suportado${RESET}" "ERROR"
        exit 1
    fi
}

# Verificar recursos do sistema
check_system_resources() {
    log "${BLUE}${INFO} Verificando recursos do sistema...${RESET}"
    
    # CPU
    CPU_CORES=$(nproc)
    log "${GREEN}${CHECK} CPU: $CPU_CORES cores${RESET}"
    
    # RAM
    RAM_GB=$(free -g | awk '/^Mem:/{print $2}')
    log "${GREEN}${CHECK} RAM: ${RAM_GB}GB${RESET}"
    
    if [ "$RAM_GB" -lt 4 ]; then
        log "${YELLOW}${WARNING} Aviso: RAM insuficiente (m√≠nimo 4GB)${RESET}" "WARN"
    fi
    
    # Disco
    DISK_FREE=$(df -h / | awk 'NR==2{print $4}')
    log "${GREEN}${CHECK} Espa√ßo livre: $DISK_FREE${RESET}"
    
    # Verificar se h√° pelo menos 20GB livres
    DISK_FREE_GB=$(df --output=avail / | tail -n1)
    DISK_FREE_GB=$((DISK_FREE_GB / 1024 / 1024))
    
    if [ "$DISK_FREE_GB" -lt 20 ]; then
        log "${YELLOW}${WARNING} Aviso: Espa√ßo em disco insuficiente (m√≠nimo 20GB)${RESET}" "WARN"
    fi
}

# Instalar depend√™ncias
install_dependencies() {
    log "${BLUE}${GEAR} Instalando depend√™ncias...${RESET}"
    
    # Atualizar pacotes
    apt-get update -qq
    
    # Instalar depend√™ncias essenciais
    apt-get install -y \
        curl \
        wget \
        git \
        vim \
        htop \
        tree \
        unzip \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
        jq \
        openssl \
        ufw \
        fail2ban \
        logrotate
    
    log "${GREEN}${CHECK} Depend√™ncias instaladas${RESET}"
}

# Instalar Docker
install_docker() {
    if command -v docker &> /dev/null; then
        log "${GREEN}${CHECK} Docker j√° est√° instalado${RESET}"
        return
    fi
    
    log "${BLUE}${GEAR} Instalando Docker...${RESET}"
    
    # Adicionar chave GPG oficial do Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # Adicionar reposit√≥rio
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # Atualizar e instalar
    apt-get update -qq
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # Iniciar e habilitar Docker
    systemctl enable docker
    systemctl start docker
    
    # Adicionar usu√°rio atual ao grupo docker
    if [ -n "$SUDO_USER" ]; then
        usermod -aG docker $SUDO_USER
    fi
    
    log "${GREEN}${CHECK} Docker instalado com sucesso${RESET}"
}

# Configurar firewall
setup_firewall() {
    log "${BLUE}${GEAR} Configurando firewall...${RESET}"
    
    # Resetar regras
    ufw --force reset
    
    # Pol√≠tica padr√£o
    ufw default deny incoming
    ufw default allow outgoing
    
    # Portas essenciais
    ufw allow 22      # SSH
    ufw allow 80      # HTTP
    ufw allow 443     # HTTPS
    ufw allow 3000    # Chatwoot
    ufw allow 3001    # Typebot Builder
    ufw allow 3002    # Typebot Viewer
    ufw allow 5678    # N8N
    ufw allow 8080    # Evolution API
    ufw allow 9000    # MinIO API
    ufw allow 9001    # MinIO Console
    
    # Habilitar firewall
    ufw --force enable
    
    log "${GREEN}${CHECK} Firewall configurado${RESET}"
}

# Configurar vari√°veis de ambiente
setup_environment() {
    log "${BLUE}${GEAR} Configurando vari√°veis de ambiente...${RESET}"
    
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example "$ENV_FILE"
            log "${GREEN}${CHECK} Arquivo .env criado a partir do exemplo${RESET}"
        else
            log "${YELLOW}${WARNING} Arquivo .env.example n√£o encontrado${RESET}" "WARN"
            create_basic_env_file
        fi
    else
        log "${GREEN}${CHECK} Arquivo .env j√° existe${RESET}"
    fi
    
    # Gerar senhas seguras se necess√°rio
    generate_secure_passwords
}

# Criar arquivo .env b√°sico
create_basic_env_file() {
    log "${BLUE}${GEAR} Criando arquivo .env b√°sico...${RESET}"
    
    cat > "$ENV_FILE" << EOF
# Sistema de Automa√ß√£o e IA v6.0
# Desenvolvido por: Marcelo D'√°vila
# Email: suporte@marcelodavila.com.br

# Configura√ß√µes b√°sicas
SYSTEM_NAME="Sistema de Automa√ß√£o e IA"
SYSTEM_VERSION="6.0"
SYSTEM_AUTHOR="Marcelo D'√°vila"
SYSTEM_AUTHOR_EMAIL="suporte@marcelodavila.com.br"

# Banco de dados
POSTGRES_PASSWORD="$(openssl rand -base64 32)"
REDIS_PASSWORD="$(openssl rand -base64 32)"

# MinIO
MINIO_ROOT_USER="minioadmin"
MINIO_ROOT_PASSWORD="$(openssl rand -base64 32)"

# Typebot
TYPEBOT_NEXTAUTH_SECRET="$(openssl rand -base64 32)"
TYPEBOT_ENCRYPTION_SECRET="$(openssl rand -base64 32)"

# N8N
N8N_BASIC_AUTH_USER="admin"
N8N_BASIC_AUTH_PASSWORD="$(openssl rand -base64 16)"
N8N_ENCRYPTION_KEY="$(openssl rand -base64 32)"

# Evolution API
EVOLUTION_JWT_SECRET="$(openssl rand -base64 32)"

# Chatwoot
CHATWOOT_SECRET_KEY_BASE="$(openssl rand -base64 32)"

# Grafana
GRAFANA_ADMIN_USER="admin"
GRAFANA_ADMIN_PASSWORD="$(openssl rand -base64 16)"

# Email de alertas
ALERT_EMAIL="suporte@marcelodavila.com.br"
EOF
    
    log "${GREEN}${CHECK} Arquivo .env b√°sico criado${RESET}"
}

# Gerar senhas seguras
generate_secure_passwords() {
    log "${BLUE}${GEAR} Verificando senhas de seguran√ßa...${RESET}"
    
    # Lista de vari√°veis que precisam de senhas seguras
    local vars=("POSTGRES_PASSWORD" "REDIS_PASSWORD" "MINIO_ROOT_PASSWORD" "TYPEBOT_NEXTAUTH_SECRET" "N8N_ENCRYPTION_KEY" "EVOLUTION_JWT_SECRET" "CHATWOOT_SECRET_KEY_BASE")
    
    for var in "${vars[@]}"; do
        if ! grep -q "^$var=" "$ENV_FILE"; then
            echo "$var=\"$(openssl rand -base64 32)\"" >> "$ENV_FILE"
            log "${GREEN}${CHECK} Senha gerada para $var${RESET}"
        fi
    done
}

# Inicializar servi√ßos
start_services() {
    log "${BLUE}${ROCKET} Iniciando servi√ßos...${RESET}"
    
    # Verificar se docker-compose.yml existe
    if [ ! -f "docker-compose.yml" ]; then
        log "${RED}${ERROR} Arquivo docker-compose.yml n√£o encontrado${RESET}" "ERROR"
        exit 1
    fi
    
    # Parar servi√ßos existentes (se houver)
    docker-compose down 2>/dev/null || true
    
    # Remover volumes √≥rf√£os
    docker volume prune -f 2>/dev/null || true
    
    # Iniciar servi√ßos em background
    docker-compose up -d
    
    log "${GREEN}${CHECK} Servi√ßos iniciados${RESET}"
}

# Aguardar servi√ßos ficarem prontos
wait_for_services() {
    log "${BLUE}${INFO} Aguardando servi√ßos ficarem prontos...${RESET}"
    
    local services=("postgres:5432" "redis:6379" "minio:9000")
    local max_attempts=30
    local attempt=1
    
    for service in "${services[@]}"; do
        local host=$(echo $service | cut -d: -f1)
        local port=$(echo $service | cut -d: -f2)
        
        log "${BLUE}${INFO} Verificando $host:$port...${RESET}"
        
        while [ $attempt -le $max_attempts ]; do
            if docker-compose exec -T $host nc -z localhost $port 2>/dev/null; then
                log "${GREEN}${CHECK} $host:$port est√° pronto${RESET}"
                break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
                log "${YELLOW}${WARNING} $host:$port ainda n√£o est√° pronto ap√≥s $max_attempts tentativas${RESET}" "WARN"
            fi
            
            sleep 5
            ((attempt++))
        done
        
        attempt=1
    done
    
    # Aguardar mais um pouco para estabilizar
    sleep 10
    log "${GREEN}${CHECK} Todos os servi√ßos est√£o prontos${RESET}"
}

# Verificar status dos servi√ßos
check_services_status() {
    log "${BLUE}${INFO} Verificando status dos servi√ßos...${RESET}"
    
    echo
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${CYAN}                    STATUS DOS SERVI√áOS${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    
    # Usar docker-compose ps para mostrar status
    docker-compose ps
    
    echo
    log "${GREEN}${CHECK} Verifica√ß√£o de status conclu√≠da${RESET}"
}

# Mostrar informa√ß√µes de acesso
show_access_info() {
    local IP=$(curl -s ifconfig.me 2>/dev/null || echo "localhost")
    
    echo
    echo -e "${PURPLE}${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${PURPLE}${WHITE}                    ${DIAMOND} SISTEMA INSTALADO COM SUCESSO! ${DIAMOND}${RESET}"
    echo -e "${PURPLE}${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo
    echo -e "${WHITE}${CROWN} SISTEMA DE AUTOMA√á√ÉO E IA v6.0${RESET}"
    echo -e "${WHITE}üë®‚Äçüíª Desenvolvido por: Marcelo D'√°vila${RESET}"
    echo -e "${WHITE}üìß Suporte: suporte@marcelodavila.com.br${RESET}"
    echo
    echo -e "${CYAN}üåê ACESSO AOS SERVI√áOS:${RESET}"
    echo -e "${WHITE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${RESET}"
    echo -e "${WHITE}‚îÇ ${ROCKET} Typebot Builder:    http://$IP:3001                 ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ ${ROCKET} Typebot Viewer:     http://$IP:3002                 ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ ${GEAR} N8N Workflows:      http://$IP:5678                 ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ ${YELLOW}üì±${RESET} Evolution API:      http://$IP:8080                 ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ üí¨ Chatwoot Support:   http://$IP:3000                 ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ ‚òÅÔ∏è MinIO Storage:       http://$IP:9001                 ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ üìä Grafana Monitor:    http://$IP:3001                 ‚îÇ${RESET}"
    echo -e "${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${RESET}"
    echo
    echo -e "${CYAN}üîë CREDENCIAIS PADR√ÉO:${RESET}"
    echo -e "${WHITE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${RESET}"
    echo -e "${WHITE}‚îÇ N8N:        admin / $(grep N8N_BASIC_AUTH_PASSWORD .env | cut -d'"' -f2 | head -c 8)...     ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ MinIO:      minioadmin / $(grep MINIO_ROOT_PASSWORD .env | cut -d'"' -f2 | head -c 8)...  ‚îÇ${RESET}"
    echo -e "${WHITE}‚îÇ Grafana:    admin / $(grep GRAFANA_ADMIN_PASSWORD .env | cut -d'"' -f2 | head -c 8)...     ‚îÇ${RESET}"
    echo -e "${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${RESET}"
    echo
    echo -e "${GREEN}${CHECK} Credenciais completas salvas em: .env${RESET}"
    echo -e "${GREEN}${CHECK} Logs do sistema em: $LOG_FILE${RESET}"
    echo
    echo -e "${YELLOW}${WARNING} IMPORTANTE:${RESET}"
    echo -e "${WHITE}‚Ä¢ Altere as senhas padr√£o antes de usar em produ√ß√£o${RESET}"
    echo -e "${WHITE}‚Ä¢ Configure SSL/TLS para dom√≠nios p√∫blicos${RESET}"
    echo -e "${WHITE}‚Ä¢ Mantenha backups regulares do sistema${RESET}"
    echo -e "${WHITE}‚Ä¢ Monitore os logs para detectar problemas${RESET}"
    echo
    echo -e "${CYAN}üìö PR√ìXIMOS PASSOS:${RESET}"
    echo -e "${WHITE}1. Acesse os servi√ßos usando os links acima${RESET}"
    echo -e "${WHITE}2. Configure suas integra√ß√µes (WhatsApp, IA, etc.)${RESET}"
    echo -e "${WHITE}3. Crie seus primeiros chatbots e workflows${RESET}"
    echo -e "${WHITE}4. Configure backups autom√°ticos${RESET}"
    echo
    echo -e "${PURPLE}${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${WHITE}¬© 2025 Marcelo D'√°vila - Todos os direitos reservados${RESET}"
    echo -e "${WHITE}Software protegido por direitos autorais${RESET}"
    echo -e "${PURPLE}${WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo
}

# Fun√ß√£o principal
main() {
    show_banner
    
    log "${BLUE}${ROCKET} Iniciando instala√ß√£o r√°pida do Sistema de Automa√ß√£o e IA v$SCRIPT_VERSION${RESET}"
    echo
    
    # Verifica√ß√µes iniciais
    check_root
    check_os
    check_system_resources
    
    # Instala√ß√µes
    install_dependencies
    install_docker
    
    # Configura√ß√µes
    setup_firewall
    setup_environment
    
    # Inicializa√ß√£o
    start_services
    wait_for_services
    
    # Verifica√ß√µes finais
    check_services_status
    
    # Mostrar informa√ß√µes
    show_access_info
    
    log "${GREEN}${CHECK} Instala√ß√£o conclu√≠da com sucesso!${RESET}"
    log "${WHITE}Para suporte, entre em contato: suporte@marcelodavila.com.br${RESET}"
}

# Fun√ß√£o de limpeza em caso de interrup√ß√£o
cleanup() {
    echo
    log "${YELLOW}${WARNING} Instala√ß√£o interrompida pelo usu√°rio${RESET}" "WARN"
    echo
    log "${WHITE}Para tentar novamente:${RESET}"
    log "${WHITE}sudo bash quick-start.sh${RESET}"
    echo
    exit 1
}

# Capturar Ctrl+C
trap cleanup SIGINT SIGTERM

# Verificar argumentos
case "${1:-}" in
    --help|-h)
        echo "Sistema de Automa√ß√£o e IA v6.0 - Inicializa√ß√£o R√°pida"
        echo "Desenvolvido por: Marcelo D'√°vila"
        echo
        echo "Uso: sudo bash quick-start.sh [OP√á√ÉO]"
        echo
        echo "Op√ß√µes:"
        echo "  --help, -h     Mostra esta ajuda"
        echo "  --version, -v  Mostra a vers√£o"
        echo "  --status       Verifica status dos servi√ßos"
        echo "  --restart      Reinicia todos os servi√ßos"
        echo "  --stop         Para todos os servi√ßos"
        echo "  --logs         Mostra logs dos servi√ßos"
        echo
        echo "Sem argumentos: Executa instala√ß√£o completa"
        echo
        echo "Suporte: suporte@marcelodavila.com.br"
        exit 0
        ;;
    --version|-v)
        echo "Sistema de Automa√ß√£o e IA v$SCRIPT_VERSION"
        echo "Desenvolvido por: Marcelo D'√°vila"
        echo "¬© 2025 - Todos os direitos reservados"
        exit 0
        ;;
    --status)
        docker-compose ps
        exit 0
        ;;
    --restart)
        log "${BLUE}${GEAR} Reiniciando servi√ßos...${RESET}"
        docker-compose restart
        log "${GREEN}${CHECK} Servi√ßos reiniciados${RESET}"
        exit 0
        ;;
    --stop)
        log "${BLUE}${GEAR} Parando servi√ßos...${RESET}"
        docker-compose down
        log "${GREEN}${CHECK} Servi√ßos parados${RESET}"
        exit 0
        ;;
    --logs)
        docker-compose logs -f
        exit 0
        ;;
    "")
        # Execu√ß√£o normal
        main
        ;;
    *)
        echo "Argumento inv√°lido: $1"
        echo "Use --help para ver as op√ß√µes dispon√≠veis"
        exit 1
        ;;
esac
