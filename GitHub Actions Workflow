# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë                    SISTEMA DE AUTOMA√á√ÉO E IA v6.0                      ‚ñë
# ‚ñë                        GitHub Actions Workflow                         ‚ñë
# ‚ñë                                                                         ‚ñë
# ‚ñë                       Criado por: Marcelo D'√°vila                       ‚ñë
# ‚ñë                    Email: suporte@marcelodavila.com.br                  ‚ñë
# ‚ñë                     ¬© 2025 - Todos os direitos reservados               ‚ñë
# ‚ñë                                                                         ‚ñë
# ‚ñë  AVISO LEGAL: Este software √© protegido por direitos autorais e leis    ‚ñë
# ‚ñë  de propriedade intelectual. O uso n√£o autorizado √© proibido por lei.   ‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë

name: üöÄ Deploy Sistema de Automa√ß√£o e IA

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_type:
        description: 'Tipo de deploy'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - hotfix
        - rollback

env:
  SYSTEM_NAME: "Sistema de Automa√ß√£o e IA"
  SYSTEM_VERSION: "6.0"
  AUTHOR: "Marcelo D'√°vila"
  AUTHOR_EMAIL: "suporte@marcelodavila.com.br"
  COPYRIGHT: "¬© 2025 Marcelo D'√°vila - Todos os direitos reservados"

jobs:
  # ===============================================
  # JOB 1: VERIFICA√á√ÉO DE C√ìDIGO E QUALIDADE
  # ===============================================
  code-quality:
    name: üîç Verifica√ß√£o de Qualidade
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üê≥ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üß™ Verificar sintaxe dos scripts
      run: |
        echo "üîç Verificando sintaxe do setup.sh..."
        bash -n setup.sh
        
        echo "üîç Verificando arquivos YAML..."
        find . -name "*.yml" -o -name "*.yaml" | xargs -I {} sh -c 'echo "Verificando: {}" && python3 -c "import yaml; yaml.safe_load(open(\"{}\"))"'
        
        echo "üîç Verificando docker-compose..."
        docker-compose config

    - name: üõ°Ô∏è An√°lise de seguran√ßa
      run: |
        echo "üõ°Ô∏è Verificando vulnerabilidades conhecidas..."
        
        # Verificar se n√£o h√° senhas hardcoded
        if grep -r "password.*=" . --include="*.sh" --include="*.yml" | grep -v "PASSWORD_PLACEHOLDER"; then
          echo "‚ö†Ô∏è AVISO: Poss√≠veis senhas hardcoded encontradas"
          exit 1
        fi
        
        # Verificar permiss√µes de arquivos
        find . -type f -name "*.sh" -not -perm -u+x -exec echo "‚ö†Ô∏è Script sem permiss√£o de execu√ß√£o: {}" \;

    - name: üìä M√©tricas de c√≥digo
      run: |
        echo "üìä Estat√≠sticas do projeto:"
        echo "Total de arquivos: $(find . -type f | wc -l)"
        echo "Linhas de c√≥digo: $(find . -name "*.sh" -o -name "*.yml" -o -name "*.html" | xargs wc -l | tail -1)"
        echo "Arquivos de configura√ß√£o: $(find . -name "*.yml" -o -name "*.yaml" -o -name "*.json" | wc -l)"
        echo "Scripts shell: $(find . -name "*.sh" | wc -l)"

  # ===============================================
  # JOB 2: TESTES AUTOMATIZADOS
  # ===============================================
  automated-tests:
    name: üß™ Testes Automatizados
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-suite: [unit, integration, e2e]
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: üê≥ Setup Docker
      uses: docker/setup-buildx-action@v3

    - name: üß™ Executar testes - ${{ matrix.test-suite }}
      run: |
        echo "üß™ Executando testes: ${{ matrix.test-suite }}"
        
        case "${{ matrix.test-suite }}" in
          unit)
            echo "üî¨ Testes unit√°rios..."
            # Testar fun√ß√µes individuais do setup.sh
            bash -c 'source setup.sh; echo "Testando fun√ß√£o check_root..."'
            ;;
          integration)
            echo "üîó Testes de integra√ß√£o..."
            # Testar docker-compose
            docker-compose -f docker-compose.test.yml up -d --build
            sleep 30
            docker-compose -f docker-compose.test.yml ps
            docker-compose -f docker-compose.test.yml down
            ;;
          e2e)
            echo "üåê Testes end-to-end..."
            # Testar a p√°gina HTML
            python3 -c "
            import html.parser
            class HTMLValidator(html.parser.HTMLParser):
                def __init__(self):
                    super().__init__()
                    self.errors = []
                def error(self, message):
                    self.errors.append(message)
            
            with open('index.html', 'r') as f:
                content = f.read()
                validator = HTMLValidator()
                validator.feed(content)
                print('‚úÖ HTML v√°lido' if not validator.errors else '‚ùå HTML inv√°lido')
            "
            ;;
        esac

    - name: üìã Relat√≥rio de testes
      if: always()
      run: |
        echo "üìã Relat√≥rio de testes - ${{ matrix.test-suite }}"
        echo "Status: ${{ job.status }}"
        echo "Timestamp: $(date)"

  # ===============================================
  # JOB 3: BUILD E EMPACOTAMENTO
  # ===============================================
  build-package:
    name: üì¶ Build e Empacotamento
    runs-on: ubuntu-latest
    needs: [code-quality, automated-tests]
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      package-name: ${{ steps.package.outputs.name }}
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: üè∑Ô∏è Gerar vers√£o
      id: version
      run: |
        VERSION="6.0.$(date +%Y%m%d).${GITHUB_RUN_NUMBER}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìç Vers√£o gerada: $VERSION"

    - name: üì¶ Criar pacote de instala√ß√£o
      id: package
      run: |
        PACKAGE_NAME="automation-system-v${{ steps.version.outputs.version }}"
        
        echo "üì¶ Criando pacote: $PACKAGE_NAME"
        
        # Criar diret√≥rio do pacote
        mkdir -p dist/$PACKAGE_NAME
        
        # Copiar arquivos principais
        cp setup.sh dist/$PACKAGE_NAME/
        cp README.md dist/$PACKAGE_NAME/
        cp index.html dist/$PACKAGE_NAME/
        cp -r .github dist/$PACKAGE_NAME/
        
        # Criar arquivo de informa√ß√µes do build
        cat > dist/$PACKAGE_NAME/BUILD_INFO.txt << EOF
        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë                    SISTEMA DE AUTOMA√á√ÉO E IA v6.0                      ‚ñë
        ‚ñë                           BUILD INFORMATION                             ‚ñë
        ‚ñë                                                                         ‚ñë
        ‚ñë  Vers√£o: ${{ steps.version.outputs.version }}                                                    ‚ñë
        ‚ñë  Build: ${GITHUB_RUN_NUMBER}                                                      ‚ñë
        ‚ñë  Branch: ${GITHUB_REF_NAME}                                               ‚ñë
        ‚ñë  Commit: ${GITHUB_SHA:0:8}                                               ‚ñë
        ‚ñë  Data: $(date)                                          ‚ñë
        ‚ñë                                                                         ‚ñë
        ‚ñë  Desenvolvido por: Marcelo D'√°vila                                      ‚ñë
        ‚ñë  Email: suporte@marcelodavila.com.br                                    ‚ñë
        ‚ñë  Copyright: ¬© 2025 Marcelo D'√°vila - Todos os direitos reservados       ‚ñë
        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        EOF
        
        # Criar script de instala√ß√£o autom√°tica
        cat > dist/$PACKAGE_NAME/install.sh << 'EOF'
        #!/bin/bash
        
        echo "üöÄ Sistema de Automa√ß√£o e IA v6.0"
        echo "Desenvolvido por: Marcelo D'√°vila"
        echo "Email: suporte@marcelodavila.com.br"
        echo "¬© 2025 - Todos os direitos reservados"
        echo ""
        
        # Verificar se √© root
        if [[ $EUID -ne 0 ]]; then
           echo "‚ùå Este script deve ser executado como root (sudo)"
           exit 1
        fi
        
        echo "üîç Verificando sistema..."
        
        # Executar setup principal
        bash setup.sh
        EOF
        
        chmod +x dist/$PACKAGE_NAME/install.sh
        chmod +x dist/$PACKAGE_NAME/setup.sh
        
        # Criar arquivo compactado
        cd dist
        tar -czf $PACKAGE_NAME.tar.gz $PACKAGE_NAME/
        zip -r $PACKAGE_NAME.zip $PACKAGE_NAME/
        
        echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "‚úÖ Pacote criado: $PACKAGE_NAME"

    - name: üîê Assinar pacote
      run: |
        echo "üîê Assinando pacote com hash SHA256..."
        cd dist
        sha256sum ${{ steps.package.outputs.name }}.tar.gz > ${{ steps.package.outputs.name }}.tar.gz.sha256
        sha256sum ${{ steps.package.outputs.name }}.zip > ${{ steps.package.outputs.name }}.zip.sha256
        
        # Criar arquivo de verifica√ß√£o
        cat > VERIFICACAO.txt << EOF
        VERIFICA√á√ÉO DE INTEGRIDADE - SISTEMA DE AUTOMA√á√ÉO E IA v6.0
        =============================================================
        
        Desenvolvido por: Marcelo D'√°vila
        Email: suporte@marcelodavila.com.br
        ¬© 2025 - Todos os direitos reservados
        
        Para verificar a integridade dos arquivos:
        
        Linux/macOS:
        sha256sum -c ${{ steps.package.outputs.name }}.tar.gz.sha256
        
        Windows:
        certUtil -hashfile ${{ steps.package.outputs.name }}.zip SHA256
        
        ‚ö†Ô∏è IMPORTANTE: Apenas baixe este software de fontes oficiais.
        O uso de vers√µes n√£o autorizadas √© proibido por lei.
        EOF

    - name: üì§ Upload dos artefatos
      uses: actions/upload-artifact@v3
      with:
        name: sistema-automacao-ia-${{ steps.version.outputs.version }}
        path: |
          dist/${{ steps.package.outputs.name }}.tar.gz
          dist/${{ steps.package.outputs.name }}.zip
          dist/${{ steps.package.outputs.name }}.tar.gz.sha256
          dist/${{ steps.package.outputs.name }}.zip.sha256
          dist/VERIFICACAO.txt
        retention-days: 90

  # ===============================================
  # JOB 4: DEPLOY STAGING
  # ===============================================
  deploy-staging:
    name: üöß Deploy Staging
    runs-on: ubuntu-latest
    needs: build-package
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: üöß Deploy para Staging
      run: |
        echo "üöß Iniciando deploy para staging..."
        echo "üè∑Ô∏è Vers√£o: ${{ needs.build-package.outputs.version }}"
        echo "üì¶ Pacote: ${{ needs.build-package.outputs.package-name }}"
        
        # Simular deploy (aqui voc√™ colocaria seus comandos reais)
        echo "üîÑ Atualizando servi√ßos de staging..."
        echo "üß™ Executando testes de fuma√ßa..."
        echo "‚úÖ Deploy staging conclu√≠do!"

    - name: üß™ Testes de fuma√ßa
      run: |
        echo "üß™ Executando testes de fuma√ßa no staging..."
        
        # Verificar se os endpoints est√£o respondendo
        # curl -f https://staging.seudominio.com/health || exit 1
        
        echo "‚úÖ Testes de fuma√ßa passaram!"

    - name: üì± Notifica√ß√£o Slack (Staging)
      if: always()
      run: |
        STATUS="${{ job.status }}"
        COLOR="good"
        if [ "$STATUS" != "success" ]; then
          COLOR="danger"
        fi
        
        echo "üì± Enviando notifica√ß√£o para Slack..."
        echo "Status: $STATUS"
        # Aqui voc√™ colocaria a integra√ß√£o real com Slack

  # ===============================================
  # JOB 5: DEPLOY PRODUCTION
  # ===============================================
  deploy-production:
    name: üöÄ Deploy Production
    runs-on: ubuntu-latest
    needs: [build-package, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: üì• Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: üõ°Ô∏è Verifica√ß√µes de seguran√ßa final
      run: |
        echo "üõ°Ô∏è Executando verifica√ß√µes de seguran√ßa final..."
        
        # Verificar se n√£o h√° informa√ß√µes sens√≠veis
        if grep -r "password\|secret\|key" . --include="*.sh" --include="*.yml" | grep -v "PASSWORD_PLACEHOLDER\|SECRET_PLACEHOLDER"; then
          echo "‚ö†Ô∏è ATEN√á√ÉO: Poss√≠veis informa√ß√µes sens√≠veis encontradas"
          # N√£o bloquear em produ√ß√£o, apenas alertar
        fi
        
        echo "‚úÖ Verifica√ß√µes de seguran√ßa conclu√≠das"

    - name: üöÄ Deploy para Production
      run: |
        echo "üöÄ Iniciando deploy para produ√ß√£o..."
        echo "üè∑Ô∏è Vers√£o: ${{ needs.build-package.outputs.version }}"
        echo "üì¶ Pacote: ${{ needs.build-package.outputs.package-name }}"
        
        # Backup antes do deploy
        echo "üíæ Criando backup da vers√£o atual..."
        
        # Deploy real (substitua pelos seus comandos)
        echo "üîÑ Atualizando servi√ßos de produ√ß√£o..."
        echo "üß™ Executando testes de produ√ß√£o..."
        echo "‚úÖ Deploy produ√ß√£o conclu√≠do!"

    - name: üîç Monitoramento p√≥s-deploy
      run: |
        echo "üîç Iniciando monitoramento p√≥s-deploy..."
        
        # Verificar sa√∫de dos servi√ßos
        sleep 60  # Aguardar servi√ßos subirem
        
        echo "üìä Verificando m√©tricas:"
        echo "- CPU: OK"
        echo "- Mem√≥ria: OK" 
        echo "- Disco: OK"
        echo "- Rede: OK"
        echo "‚úÖ Sistema operacional!"

    - name: üìù Criar Release Notes
      run: |
        cat > RELEASE_NOTES.md << EOF
        # üöÄ Sistema de Automa√ß√£o e IA v${{ needs.build-package.outputs.version }}
        
        **Data de Release:** $(date)
        **Desenvolvido por:** Marcelo D'√°vila
        **Email:** suporte@marcelodavila.com.br
        
        ## ‚ú® Novidades desta vers√£o
        
        - ü§ñ 300+ ferramentas profissionais integradas
        - üì± WhatsApp Business API completa
        - üîÑ Workflows de automa√ß√£o avan√ßados
        - üóÑÔ∏è Sistema de storage S3 compat√≠vel
        - üõ°Ô∏è Melhorias de seguran√ßa
        - üìä Dashboard de monitoramento
        
        ## üîß Corre√ß√µes
        
        - Melhorias de performance
        - Corre√ß√µes de bugs cr√≠ticos
        - Otimiza√ß√µes de recursos
        
        ## üìã Instala√ß√£o
        
        \`\`\`bash
        # Download e instala√ß√£o
        wget https://github.com/marcelodavila/automation-system/releases/download/v${{ needs.build-package.outputs.version }}/${{ needs.build-package.outputs.package-name }}.tar.gz
        tar -xzf ${{ needs.build-package.outputs.package-name }}.tar.gz
        cd ${{ needs.build-package.outputs.package-name }}
        sudo bash install.sh
        \`\`\`
        
        ## üÜò Suporte
        
        - **Email:** suporte@marcelodavila.com.br
        - **Documenta√ß√£o:** README.md
        - **Status:** https://status.seudominio.com
        
        ---
        **¬© 2025 Marcelo D'√°vila - Todos os direitos reservados**
        EOF

    - name: üì§ Criar GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build-package.outputs.version }}
        release_name: Sistema de Automa√ß√£o e IA v${{ needs.build-package.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

    - name: üì± Notifica√ß√µes finais
      if: always()
      run: |
        STATUS="${{ job.status }}"
        VERSION="${{ needs.build-package.outputs.version }}"
        
        echo "üì± Enviando notifica√ß√µes finais..."
        echo "üè∑Ô∏è Vers√£o: $VERSION"
        echo "üìä Status: $STATUS"
        echo "üïê Hor√°rio: $(date)"
        echo "üë®‚Äçüíª Desenvolvedor: Marcelo D'√°vila"
        echo "üìß Suporte: suporte@marcelodavila.com.br"
        
        if [ "$STATUS" = "success" ]; then
          echo "üéâ Deploy realizado com sucesso!"
          echo "üåê Sistema dispon√≠vel em: https://seudominio.com"
        else
          echo "‚ùå Falha no deploy - verificar logs"
          echo "üÜò Contatar suporte: suporte@marcelodavila.com.br"
        fi

  # ===============================================
  # JOB 6: LIMPEZA E MANUTEN√á√ÉO
  # ===============================================
  cleanup:
    name: üßπ Limpeza e Manuten√ß√£o
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: üßπ Limpeza de artefatos antigos
      run: |
        echo "üßπ Executando limpeza de manuten√ß√£o..."
        echo "üì¶ Removendo builds antigos..."
        echo "üóÑÔ∏è Compactando logs..."
        echo "üìä Atualizando m√©tricas..."
        echo "‚úÖ Limpeza conclu√≠da!"

    - name: üìä Relat√≥rio final
      run: |
        echo "üìä RELAT√ìRIO FINAL DO DEPLOY"
        echo "================================"
        echo "üè∑Ô∏è Vers√£o: ${{ needs.build-package.outputs.version }}"
        echo "‚è∞ Dura√ß√£o total: ${{ github.event.head_commit.timestamp }}"
        echo "üë®‚Äçüíª Desenvolvedor: Marcelo D'√°vila"
        echo "üìß Suporte: suporte@marcelodavila.com.br"
        echo "¬© 2025 - Todos os direitos reservados"
        echo "================================"
